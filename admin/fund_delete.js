/**
 * fund_delete.js
 * Focused, standalone deletion + (optional) load helper for Fund records.
 *
 * HOW TO USE (table layout):
 * 1. In your HTML you already have a table like:
 *      <table id="fundTable">
 *        <tbody id="fundTableBody"></tbody>
 *      </table>
 *    Each row will be generated by this script OR you can pre-render it.
 *
 * 2. Include a "Reload" button with id="reloadFundsBtn" (optional).
 * 3. Include this script AFTER the HTML (or wrap in DOMContentLoaded).
 * 4. Ensure backend DELETE route: DELETE /api/fundraising/:id returns 204 (or 200).
 *
 * 5. If you ALREADY create rows elsewhere, make sure each delete button:
 *      <button data-action="delete-fund" data-id="THE_ID">ðŸ—‘</button>
 *    and each row has data-id="THE_ID".
 *    Then call FundDelete.init({ attachOnly: true }) to only bind deletion.
 *
 * CONFIG OPTIONS for FundDelete.init():
 *  {
 *     apiBase: 'http://localhost:5000',  // API root
 *     tbodySelector: '#fundTableBody',   // Table body selector
 *     reloadBtnSelector: '#reloadFundsBtn', // optional reload button
 *     attachOnly: false,                 // If true, do not auto-load funds, only bind delete
 *     autoReloadAfterDelete: true,       // Re-fetch list after successful delete
 *     accept404AsSuccess: false,         // If true treat 404 as success (default false now)
 *     debug: true                        // Log debug info to console
 *  }
 *
 *  Public helpers (after init):
 *     FundDelete.reload()  -> manually reload list
 *
 *  Minimal backend route (Express + Mongoose):
 *     app.delete('/api/fundraising/:id', async (req,res)=>{
 *       try {
 *         const { id } = req.params;
 *         if(!/^[0-9a-fA-F]{24}$/.test(id)) return res.status(400).json({message:'Invalid id'});
 *         const del = await Fund.findByIdAndDelete(id);
 *         if(!del) return res.status(404).json({message:'Not found'});
 *         return res.status(204).send();
 *       } catch(e){ console.error(e); res.status(500).json({message:'Server error'}); }
 *     });
 *
 * CORS (if frontend served from a different origin):
 *     app.use(cors({
 *        origin: 'http://127.0.0.1:5501', // or '*'
 *        methods: ['GET','POST','DELETE','OPTIONS'],
 *        allowedHeaders: ['Content-Type','Accept']
 *     }));
 */

const FundDelete = (() => {
  const DEFAULTS = {
  apiBase: 'http://localhost:5000',
    tbodySelector: '#fundTableBody',
    reloadBtnSelector: '#reloadFundsBtn',
    attachOnly: false,
    autoReloadAfterDelete: true,
    accept404AsSuccess: false,
    debug: true
  };

  let cfg = { ...DEFAULTS };
  let tbodyEl = null;
  let initialized = false;

  /* =============== PUBLIC INIT =============== */
  function init(options = {}) {
    if (initialized) {
      log('Already initialized â€“ ignoring second init call.');
      return;
    }
    cfg = { ...DEFAULTS, ...options };
    tbodyEl = document.querySelector(cfg.tbodySelector);

    if (!tbodyEl) {
      warn('Table body not found at selector:', cfg.tbodySelector);
      return;
    }

    bindDeleteDelegation();
    bindReloadButton();

    if (!cfg.attachOnly) {
      reload();
    } else {
      log('attachOnly=true; did not auto-load funds.');
    }

    initialized = true;
  }

  /* =============== BINDINGS =============== */
  function bindReloadButton() {
    if (!cfg.reloadBtnSelector) return;
    const btn = document.querySelector(cfg.reloadBtnSelector);
    if (btn) {
      btn.addEventListener('click', () => reload());
    }
  }

  function bindDeleteDelegation() {
    tbodyEl.addEventListener('click', async (e) => {
      const targetBtn = e.target.closest('button[data-action="delete-fund"]');
      if (!targetBtn) return;

      const id = targetBtn.getAttribute('data-id');
      if (!id) {
        alert('Missing data-id attribute.');
        return;
      }

      if (!confirm('Delete this fund? This cannot be undone.')) return;

      const row = targetBtn.closest('tr');
      markRowDeleting(row, true);

      log('[DELETE] ID =', id);

      try {
  const res = await fetch(cfg.apiBase + '/api/fundraising/' + encodeURIComponent(id), {
          method: 'DELETE',
          headers: { 'Accept': 'application/json' }
        });

        log('[DELETE] Status:', res.status);

        if (isSuccessStatus(res.status)) {
          if (cfg.autoReloadAfterDelete) {
            await reload();
          } else {
            removeRow(id);
          }
        } else {
            // Show body if any for easier diagnostics
          let bodyText = '';
          try { bodyText = await res.text(); } catch (_) {}
          if (res.status === 404) {
            if (cfg.accept404AsSuccess) {
              log('404 treated as success (accept404AsSuccess=true).');
              if (cfg.autoReloadAfterDelete) await reload(); else removeRow(id);
            } else {
              alert('Fund not found (404). Backend could not locate this id.');
              restoreRow(row);
            }
          } else if (res.status === 400) {
            alert('Invalid ID / Bad request (400). Body: ' + bodyText);
            restoreRow(row);
          } else if (res.status === 405) {
            alert('Method not allowed (405). Missing DELETE route?');
            restoreRow(row);
          } else {
            alert('Delete failed (status ' + res.status + '). Body: ' + bodyText);
            restoreRow(row);
          }
        }
      } catch (err) {
        alert('Network/CORS error: ' + err.message);
        restoreRow(row);
      }
    });
  }

  /* =============== LOAD & RENDER =============== */
  async function reload() {
    if (!tbodyEl) return;
    tbodyEl.innerHTML = rowSpanHTML('Loading...', 7, '#444');
    try {
  const res = await fetch(cfg.apiBase + '/api/fundraising', { headers: { 'Accept': 'application/json' } });
      if (!res.ok) throw new Error('Status ' + res.status);
      const list = await res.json();
      renderList(list);
    } catch (e) {
      warn('Error loading funds', e);
      tbodyEl.innerHTML = rowSpanHTML('Error loading funds.', 7, '#b3261e');
    }
  }

  function renderList(list) {
    if (!Array.isArray(list) || list.length === 0) {
      tbodyEl.innerHTML = rowSpanHTML('No funds available.', 7, '#555');
      return;
    }
    // Sort newest first if createdAt/date present
    list.sort((a,b)=> new Date(b.createdAt||b.date||0) - new Date(a.createdAt||a.date||0));
    tbodyEl.innerHTML = list.map(f => rowHTML(f)).join('');
  }

  function rowHTML(f) {
    // Support both _id and id
    const id = f._id || f.id || '';
    const title = esc(f.title);
    const descFirst = (f.description || '').replace(/\r/g,'').split('\n')[0];
    const descShort = esc(descFirst.length > 140 ? descFirst.slice(0,137) + '...' : descFirst);
    const goal = fmtCurrency(f.goal);
    const raised = fmtCurrency(f.raised);
    const date = formatDate(f.date || f.createdAt);
    return `<tr data-id="${id}">
      <td style="font-weight:600;max-width:200px;word-break:break-word;">${title}</td>
      <td style="font-size:.7rem;max-width:320px;word-break:break-word;color:#333;">${descShort}</td>
      <td style="text-align:right;">${goal}</td>
      <td style="text-align:right;">${raised}</td>
      <td>${date}</td>
      <td><span style="font-family:monospace;font-size:.62rem;background:#eef3f8;border:1px solid #d3dee9;padding:2px 5px;border-radius:4px;display:inline-block;max-width:120px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;" title="${id}">${id}</span></td>
      <td style="text-align:center;">
        <button data-action="delete-fund" data-id="${id}" style="background:#fff;border:1px solid #cdd6df;padding:4px 8px;border-radius:6px;cursor:pointer;font-size:.7rem;">ðŸ—‘</button>
      </td>
    </tr>`;
  }

  /* =============== HELPERS =============== */
  function isSuccessStatus(status) {
    return status === 200 || status === 204;
  }

  function removeRow(id) {
    const row = tbodyEl.querySelector(`tr[data-id="${CSS.escape(id)}"]`);
    if (row) row.remove();
    if (!tbodyEl.querySelector('tr')) {
      tbodyEl.innerHTML = rowSpanHTML('No funds available.', 7, '#555');
    }
  }

  function markRowDeleting(row, deleting) {
    if (!row) return;
    if (deleting) {
      row.classList.add('fund-row-deleting');
      row.style.opacity = '0.55';
      row.style.position = 'relative';
    } else {
      row.classList.remove('fund-row-deleting');
      row.style.opacity = '';
      row.style.position = '';
    }
  }

  function restoreRow(row) {
    markRowDeleting(row, false);
    const btn = row?.querySelector('button[data-action="delete-fund"]');
    if (btn) {
      btn.disabled = false;
      btn.textContent = 'ðŸ—‘';
    }
  }

  function rowSpanHTML(text, cols, color='#444') {
    return `<tr><td colspan="${cols}" style="padding:14px;text-align:center;font-size:.75rem;color:${color};">${esc(text)}</td></tr>`;
  }

  function esc(str) {
    return String(str||'').replace(/[&<>"']/g, s => ({
      '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'
    }[s]));
  }

  function fmtCurrency(v) {
    const n = Number(v||0);
    return 'â‚¹' + n.toLocaleString('en-IN');
  }

  function formatDate(d) {
    if(!d) return '';
    try {
      return new Date(d).toLocaleDateString('en-IN',{year:'numeric',month:'short',day:'numeric'});
    } catch { return ''; }
  }

  function log(...a){ if(cfg.debug) console.log('[FundDelete]', ...a); }
  function warn(...a){ if(cfg.debug) console.warn('[FundDelete]', ...a); }

  /* =============== PUBLIC API =============== */
  return {
    init,
    reload
  };
})();

/* Auto-init (optional) â€“ comment out if you want manual control
   FundDelete.init(); */